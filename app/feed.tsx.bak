import React, { useState, useEffect } from 'react';
import { 
  View, 
  Text, 
  TouchableOpacity, 
  StyleSheet, 
  FlatList, 
  Image,
  ActivityIndicator,
  useColorScheme,
  SafeAreaView,
  RefreshControl,
  Switch
} from 'react-native';
import { useRouter } from 'expo-router';
import { Query } from 'appwrite';
import { databases, DATABASE_ID, ARTICLES_COLLECTION_ID } from '../config/appwrite';

interface Article {
  id: string;
  title: string;
  description: string;
  category: string;
  imageUrl: string;
  author: string;
  date: string;
  readTime: number;
  content: string;
  beginner: boolean;
}

const colors = {
  light: {
    background: '#ffffff',
    text: '#000000',
    card: '#f8f9fa',
    border: '#dee2e6',
    primary: '#4CAF50',
    secondary: '#666666',
  },
  dark: {
    background: '#121212',
    text: '#ffffff',
    card: '#1e1e1e',
    border: '#333333',
    primary: '#81C784',
    secondary: '#A0A0A0',
  }
} as const;

type Theme = typeof colors.light;

export default function FeedScreen() {
  const [articles, setArticles] = useState<Article[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isBeginnerMode, setIsBeginnerMode] = useState(false);
  
  const router = useRouter();
  const colorScheme = useColorScheme() || 'light';
  const theme = colors[colorScheme === 'dark' ? 'dark' : 'light'];

  const fetchArticles = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await databases.listDocuments(
        DATABASE_ID,
        ARTICLES_COLLECTION_ID,
        [
          Query.orderDesc('$createdAt'),
          isBeginnerMode ? Query.equal('beginner', true) : undefined
        ].filter(Boolean)
      );

      const articles = response.documents.map(doc => ({
        id: doc.$id,
        title: doc.title || 'Untitled',
        description: doc.description || '',
        category: doc.category || 'General',
        imageUrl: doc.imageUrl || 'https://images.unsplash.com/photo-1504384764587-65818e5f5659',
        author: doc.author || 'Anonymous',
        date: doc.$createdAt ? new Date(doc.$createdAt).toISOString().split('T')[0] : 'Unknown',
        readTime: doc.readTime || 5,
        content: doc.content || 'No content available',
        beginner: Boolean(doc.beginner)
      }));

      setArticles(articles);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to load articles';
      setError(errorMessage);
      console.error('Error fetching articles:', error);
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  useEffect(() => {
    fetchArticles();
  }, [isBeginnerMode]);

  const onRefresh = () => {
    setRefreshing(true);
    fetchArticles();
  };

  const renderArticle = ({ item }: { item: Article }) => (
    <TouchableOpacity 
      style={[styles.articleCard, { backgroundColor: theme.card, borderColor: theme.border }]}
      onPress={() => router.push(`/article-detail?id=${item.id}`)}
    >
      <Image 
        source={{ uri: item.imageUrl }} 
        style={styles.articleImage}
        resizeMode="cover"
      />
      <View style={styles.articleContent}>
        <Text style={[styles.articleTitle, { color: theme.text }]}>{item.title}</Text>
        <Text style={[styles.articleDescription, { color: theme.secondary }]}>
          {item.description}
        </Text>
        <View style={styles.articleFooter}>
          <Text style={[styles.articleMeta, { color: theme.secondary }]}>
            {item.author} • {item.date} • {item.readTime} min read
          </Text>
          {item.beginner && (
            <View style={[styles.beginnerBadge, { backgroundColor: theme.primary }]}>
              <Text style={styles.beginnerText}>Beginner</Text>
            </View>
          )}
        </View>
      </View>
    </TouchableOpacity>
  );

  if (loading && !refreshing) {
    return (
      <View style={[styles.loadingContainer, { backgroundColor: theme.background }]}>
        <ActivityIndicator size="large" color={theme.primary} />
      </View>
    );
  }

  if (error) {
    return (
      <View style={[styles.errorContainer, { backgroundColor: theme.background }]}>
        <Text style={[styles.errorText, { color: theme.text }]}>{error}</Text>
        <TouchableOpacity 
          style={[styles.retryButton, { backgroundColor: theme.primary }]}
          onPress={fetchArticles}
        >
          <Text style={styles.retryText}>Retry</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: theme.background }]}>
      <View style={styles.header}>
        <Text style={[styles.title, { color: theme.text }]}>Latest Articles</Text>
        <View style={styles.toggleContainer}>
          <Text style={[styles.toggleLabel, { color: theme.text }]}>Beginner Mode</Text>
          <Switch
            value={isBeginnerMode}
            onValueChange={setIsBeginnerMode}
            trackColor={{ false: '#767577', true: theme.primary }}
            thumbColor={isBeginnerMode ? '#f4f3f4' : '#f4f3f4'}
          />
        </View>
      </View>
      
      <FlatList
        data={articles}
        renderItem={renderArticle}
        keyExtractor={item => item.id}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={[theme.primary]}
            tintColor={theme.primary}
          />
        }
        contentContainerStyle={styles.listContent}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text style={[styles.emptyText, { color: theme.text }]}>
              No articles found. Pull to refresh.
            </Text>
          </View>
        }
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
  },
  toggleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  toggleLabel: {
    marginRight: 8,
    fontSize: 16,
  },
  listContent: {
    padding: 16,
  },
  articleCard: {
    borderRadius: 8,
    marginBottom: 16,
    overflow: 'hidden',
    borderWidth: 1,
  },
  articleImage: {
    width: '100%',
    height: 200,
  },
  articleContent: {
    padding: 16,
  },
  articleTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  articleDescription: {
    fontSize: 14,
    marginBottom: 12,
    lineHeight: 20,
  },
  articleFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  articleMeta: {
    fontSize: 12,
  },
  beginnerBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  beginnerText: {
    color: 'white',
    fontSize: 12,
    fontWeight: '600',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  errorText: {
    fontSize: 16,
    marginBottom: 20,
    textAlign: 'center',
  },
  retryButton: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 5,
  },
  retryText: {
    color: 'white',
    fontWeight: '600',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  emptyText: {
    fontSize: 16,
    textAlign: 'center',
  },
});
